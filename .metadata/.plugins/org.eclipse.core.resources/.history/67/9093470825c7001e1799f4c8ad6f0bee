package product;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.Map;

 

 
public  class ProductSQL {
	protected static final String SAVE_PRODUCT = "INSERT INTO Product (productType, startDate, endDate) VALUES (?, ?, ?)";
	protected static final String SAVE_DisbursementSchedule = "INSERT INTO  DisbursementSchedule (LoanID,DisbursementId,DisbursementDate,DisbursementAmount) VALUES (?,?,?, ?)";
	protected static final String SAVE_LOAN_PRODUCT = "INSERT INTO  LOANPRODUCT (productId,loanvalue,interestrate) VALUES (?,?, ?)";
	public static void insert(Product p) throws Exception{
		PreparedStatement stmt = null;
		PreparedStatement stmt1 = null;
		PreparedStatement stmt2 = null;
		ResultSet rs=null ;
        int j = 1;
        long id =-1;
		
		try {
			Connection con=DatabaseHelper.getConnection();
        	stmt = con.prepareStatement(SAVE_PRODUCT, Statement.RETURN_GENERATED_KEYS);
        	stmt1 = con.prepareStatement(SAVE_DisbursementSchedule, Statement.RETURN_GENERATED_KEYS);
        	stmt2 = con.prepareStatement(SAVE_LOAN_PRODUCT, Statement.RETURN_GENERATED_KEYS);
        	 
        	if (p.getStartDate() != null) {
        		stmt.setString(j++, p.getProductType());
        		stmt.setDate(j++, toSQLDate(p.getStartDate()));
        		stmt.setDate(j++, toSQLDate(p.getEndDate()));
        		
        		
        		
        		
        	    
        		
        	}
        	else {
        		stmt.setNull(j++, Types.DATE);
        	}
        	  

              // Retrieve the generated keys
           // Execute the update operation
              int affectedRows = stmt.executeUpdate();

              if (affectedRows == 0) {
                  throw new SQLException("Inserting product failed, no rows affected.");
              }

              // Execute a separate query to retrieve the last inserted ID
              try (ResultSet generatedKeys = stmt.executeQuery("SELECT product_id FROM Product WHERE rownum = 1 ORDER BY product_id DESC")) {
                  if (generatedKeys.next()) {
                      id= generatedKeys.getLong("product_id");
                     
                      System.out.println("Generated ID: " + id);
                  } else {
                      throw new SQLException("Inserting product failed, no ID obtained.");
                  }
              }

          } catch (Exception e) {
              throw e;
          } finally {
              
              close(stmt);
          }
		 LoanProduct lp=(LoanProduct)p;
		 int c=1;
   		stmt2.setInt(1,2);
   		stmt2.setLong(2, (int)lp.getTotalValue());
   		stmt2.setLong(3, (int)lp.getRate());
   		stmt2.setLong(4, (int)id);
   		
   		int affectedRows = stmt2.executeUpdate();

   		if (affectedRows == 0) {
   		    throw new SQLException("Inserting product failed, no rows affected.");
   		}

   		// Retrieve the generated keys
   		try (ResultSet generatedKeys = stmt2.getGeneratedKeys()) {
   		    if (generatedKeys.next()) {
   		        id = generatedKeys.getLong(1);
   		        System.out.println("Generated ID: " + id);
   		    } else {
   		        throw new SQLException("Inserting product failed, no ID obtained.");
   		    }
   		}
   		close(stmt2);
	}
		
		public static void delete(long id){
			try {
				Connection con=DatabaseHelper.getConnection();}
			catch( Exception e){
				try {
					throw e;
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}
	
//	static public PreparedStatement newPreparedStatement(Connection con, String st) throws SQLException {
//        if( con == null ) {
//                throw new SQLException("CalypsoException: ioSQL.newPreparedStatement connection is null.");
//        }
//        PreparedStatement stmt = null;
//        try {
//            stmt = con.prepareStatement(st);
//        }
//        catch (SQLException e) {
//            throw e;
//        }
//        catch (Exception e) {
//        	throw e;
//        }
//        return stmt;
//    }
	static public void close(Statement stmt) {
        try {
            if (stmt != null) {
                stmt.close();
            }
        }
        catch (Exception e) {
        }
    }
	public static Date toSQLDate(java.util.Date date) {
        if (date == null) {
            return null;
        }
        return new Date(date.getTime());
    }

}