package product;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


public class ScheduleSQL {

	protected static final String SAVE_DisbursementSchedule = "INSERT INTO  DisbursementSchedule (LoanID,DisbursementDate,DisbursementAmount) VALUES (?,?, ?)";
	protected static final String SAVE_RepaymentSchedule = "INSERT INTO  RepaymentSchedule (LID,RepaymentDate,RepaymentAmount) VALUES (?,?, ?)";

	public static void insertDisbursementSchedule(Product p) throws Exception {
		PreparedStatement stmt = null;
		long id = -1;
		LoanProduct lp = (LoanProduct) p;
		try {
			Connection con = DatabaseHelper.getConnection();

			if (p.getStartDate() != null) {
				for (Schedule schedule : p.getDisbursementSchedule()) {
					int index = 1;
					stmt = con.prepareStatement(SAVE_DisbursementSchedule, Statement.RETURN_GENERATED_KEYS);
					stmt.setInt(index++, lp.getLoanId());
					stmt.setDate(index++, toSQLDate(schedule.getDate()));
					stmt.setDouble(index++, (schedule.getAmount()));
					stmt.executeUpdate();
				}
			}

			// Retrieve the generated keys
			// Execute the update operation
			int affectedRows = stmt.executeUpdate();

			if (affectedRows == 0) {
				throw new SQLException("Inserting product failed, no rows affected.");
			}

			// Execute a separate query to retrieve the last inserted ID
			try (ResultSet generatedKeys = stmt
					.executeQuery("SELECT product_id FROM Product WHERE rownum = 1 ORDER BY product_id DESC")) {
				if (generatedKeys.next()) {
					id = generatedKeys.getLong("product_id");

					p.setProductId((int) id);
				} else {
					throw new SQLException("Inserting product failed, no ID obtained.");
				}
			}

		} catch (Exception e) {
			throw e;
		} finally {

			close(stmt);
		}
	}

	public static List<Schedule> readDisbursementSchedule(int loanId) {

		PreparedStatement stmt = null;
		ResultSet rs = null;
		Connection con = null;
		List<Schedule> ls = new ArrayList<Schedule>();
		try {
			con = DatabaseHelper.getConnection();
			stmt = con.prepareStatement("SELECT * FROM disbursementschedule WHERE disbursementSchedule.LoanID=?");
			stmt.setInt(1, loanId); // Set the parameter value for the Product
			rs = stmt.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("DisbursementId"); // Assuming PRODUCT_ID
				Double amount = rs.getDouble("disbursementamount"); 
				Date date = rs.getDate("DisbursementDate");
				Schedule sch = new Schedule(id, amount, date);
				ls.add(sch);

			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// Close resources in the finally block
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			close(stmt);
			if (con != null) {
				try {
					con.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return ls;
	}

	public static void insertRepaymentSchedule(int id, long amount) throws Exception {
		PreparedStatement stmt = null;
		int j = 1;

		try {
			Connection con = DatabaseHelper.getConnection();

			if (amount != 0) {

				stmt = con.prepareStatement(SAVE_RepaymentSchedule, Statement.RETURN_GENERATED_KEYS);
				stmt.setLong(j++, id);
				long millis = System.currentTimeMillis();
				Date date = new Date(millis);
				stmt.setDate(j++, date);
				stmt.setLong(j++, amount);

				stmt.executeUpdate();
			} 

			// Retrieve the generated keys
			// Execute the update operation
			int affectedRows = stmt.executeUpdate();

			if (affectedRows == 0) {
				throw new SQLException("Inserting product failed, no rows affected.");
			}

		} catch (Exception e) {
			throw e;
		} finally {

			close(stmt);
		}
	}

//	public static void delete(long id) {
//		try {
//			Connection con = DatabaseHelper.getConnection();
//		} catch (Exception e) {
//			try {
//				throw e;
//			} catch (Exception e1) {
//				// TODO Auto-generated catch block
//				e1.printStackTrace();
//			}
//		}
//	}

	static public void close(Statement stmt) {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
	}

	public static Date toSQLDate(java.util.Date date) {
		if (date == null) {
			return null;
		}
		return new Date(date.getTime());
	}

	public static void deleteDisbursementSchedule(int id) {
		
		PreparedStatement stmt = null;
Connection con=null;
		
		try {
			con = DatabaseHelper.getConnection();
			stmt = newPreparedStatement(con,
					"DELETE FROM disbursementSchedule WHERE LOANID=?");
			stmt.setLong(1, id);
			
			stmt.executeUpdate();
			System.out.println("Disbursement deleted successfully");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			
			close(stmt);
			if (con != null) {
				try {
					con.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	
		
	}
	public static void deleteRepaymentSchedule(int id) {
		
		PreparedStatement stmt = null;
		
		Connection con=null;
		
		try {
			con = DatabaseHelper.getConnection();
			stmt = newPreparedStatement(con,
					"DELETE FROM repaymentSchedule WHERE LID=?");
			stmt.setLong(1, id);
			stmt.executeUpdate();
			System.out.println("Repayment deleted successfully");
			
		}  catch (Exception e) {
			e.printStackTrace();
		} finally {
			
			close(stmt);
			if (con != null) {
				try {
					con.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	
		
	}
	 static public PreparedStatement newPreparedStatement(Connection con,
			 String st) throws SQLException {
		 
			 if( con == null ) {
			 throw new SQLException("CalypsoException: ioSQL.newPreparedStatement connection is null");
			 }
			 PreparedStatement stmt = null;
			 try {
			 stmt = con.prepareStatement(st);
			 }
			 catch (SQLException e) {
			 throw e;
			 }
			 catch (Exception e) {
			 throw e;
			 }
			 return stmt;
			 }

}