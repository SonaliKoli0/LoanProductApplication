package product;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;


public class LoanProductSQL extends ProductSQL {

	protected static final String SAVE_LOAN_PRODUCT = "INSERT INTO  LOANPRODUCT (productId,loanvalue,interestrate) VALUES (?,?,?)";
	protected static final String READ_LOAN_PRODUCT = "SELECT * FROM LOANPRODUCT INNER JOIN PRODUCT ON LOANPRODUCT.PRODUCTID=PRODUCT.PRODUCT_ID WHERE LOANPRODUCT.PRODUCTID=? ";

	public static void insertLoanProduct(Product p) throws Exception {
		PreparedStatement stmt = null;
		int j = 1;
		long id = -1;
		LoanProduct lp = (LoanProduct) p;

		try {
			Connection con = DatabaseHelper.getConnection();
			stmt = con.prepareStatement(SAVE_LOAN_PRODUCT, Statement.RETURN_GENERATED_KEYS);
			if (p.getStartDate() != null) {
				stmt.setInt(j++, p.getProductId());
				stmt.setInt(j++, (int) lp.getTotalValue());
				stmt.setInt(j++, (int) lp.getRate());

			} else {
				stmt.setNull(j++, Types.DATE);
			}

			int affectedRows = stmt.executeUpdate();

			if (affectedRows == 0) {
				throw new SQLException("Inserting product failed, no rows affected.");
			}
			try (ResultSet generatedKeys = stmt
					.executeQuery("SELECT loanId FROM LoanPRoduct WHERE rownum = 1 ORDER BY loanId DESC")) {
				if (generatedKeys.next()) {
					id = generatedKeys.getLong("loanId");

					lp.setLoanId((int) id);

				} else {
					throw new SQLException("Inserting product failed, no ID obtained.");
				}
			}

		} catch (Exception e) {
			throw e;
		} finally {

			close(stmt);
		}
		ScheduleSQL.insertDisbursementSchedule(p);
	}

	public static Product readProduct(int id) {
	
		PreparedStatement stmt1 = null;
		ResultSet rs = null;
		Connection con = null;
		Product lp = ProductSQL.readProduct(id);
		try {
			con = DatabaseHelper.getConnection();
			stmt1 = con.prepareStatement(
					"SELECT * FROM LOANPRODUCT INNER JOIN PRODUCT ON LOANPRODUCT.PRODUCTID=PRODUCT.PRODUCT_ID WHERE LOANPRODUCT.PRODUCTID=?");
			stmt1.setLong(1, id);

			rs = stmt1.executeQuery();
			System.out.println("Product read successfully");
			if (rs.next()) {
				int loanId = rs.getInt("LOANID");
				Long totalValue = rs.getLong("LOANVALUE");
				Double rate = rs.getDouble("INTERESTRATE");
				List<Schedule> ls = ScheduleSQL.readDisbursementSchedule(loanId);
				lp = new LoanProduct( loanId, totalValue, rate, ls,lp);

			} else {
				throw new SQLException("Query returned no results.");
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			close(stmt1);
			if (con != null) {
				try {
					con.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return lp;
	}
	// static public PreparedStatement newPreparedStatement(Connection con,
	// String st) throws SQLException {
	// if( con == null ) {
	// throw new SQLException("CalypsoException: ioSQL.newPreparedStatement
	// connection is null.");
	// }
	// PreparedStatement stmt = null;
	// try {
	// stmt = con.prepareStatement(st);
	// }
	// catch (SQLException e) {
	// throw e;
	// }
	// catch (Exception e) {
	// throw e;
	// }
	// return stmt;
	// }
	static public void close(Statement stmt) {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
	}


}